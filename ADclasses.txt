////////////////////////////////////////////////////////////////////////////////////////////////////////
class Mob
{
private:
	
	std::string name;
	int atkD, defense, health;
	Mob(Mob& other);
	Mob& operator=(Mob&);

public:

	Mob(std::string name, int atk, int health);
	void setName(std::string name);
	void setatkD(int);
	void setDefense(int);
	void setHealth(int);
	std::string getName() const;
	int getatkD() const;
	int getDefense() const;
	int getHealth() const;
};

class specialMob:public Mob // special type of Mob(like vampire, demon, etc.)
{
private:

	double atkM, healthM; // multipliers

public:

	void setHealthMulti(double);
	void setAtkMulti(double);
	double getAtkM() const;
	double getHealth() const;
};

class NPC
{
private:

	std::string name;
	int health, atkD;
	NPC(NPC& other);
	NPC& operator=(NPC&);

public:
	
	void setName(int);
	void setatkD(int);
	void setDefense(int);
	void setHealth(int);
	std::string getName();
	int getatkD() const;
	int getDefense() const;
	int getHealth() const;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Location//Exactly what it says. Locations on a map
{
	House** ;//lists houses in current location
	Location* North,South,East,West; //Adjoining locations in the map
	virtual Item** mapItems();//list of items contained in location
	virtual NPC** mapNPC();//list NPC in location on map
	virtual bool checkNew();//Check if location has been discovered
	bool checkHouse();//returns true if location contains a House
	bool checkItems();//returns true if location contains any uncollected/unused items
};
//Some classes that would inherit from Location include but are not limited to:
class cityCenter:public Location{	};
class Gardem:public Location{	};
class Graveyard:public Location{	};


class House//A house would be used for buildings which would contain rooms
{         //for example Bar, Mansion
private:
	Room** doors;//Rooms adjoining with current
	string description;//Description of building
public:
	House()//House constructor
};
//Some classes that would inherit from House include but are not limited to:
class Bar:public House{	};
class Mansion:public House{	};
class TownHall:public House{	};


class Room:public House
{
private:
	Item** listItems;//list of items
	NPC** listNPC;//
	Item** listStatic;
public:
	Room();//Room constructor. Should Create room
	Item** roomStatic();//List of static items contained in room Eg. Furniture
	NPC** roomNPC();//List of non-playable characters in room
	bool checkNew();//Check if room has been discovered
};
//Some classes that would inherit from House include but are not limited to:
class bedroom:public room{	};
class Kitchen:public room{	};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
